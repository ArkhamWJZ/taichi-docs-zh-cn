# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2018, Yuanming Hu
# This file is distributed under the same license as the taichi package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: taichi 0.5.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-04-11 18:00+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"

#: ../../meta.rst:4
msgid "Metaprogramming"
msgstr ""

#: ../../meta.rst:6
msgid "Taichi provides metaprogramming infrastructures. Metaprogramming can"
msgstr ""

#: ../../meta.rst:8
msgid ""
"Unify the development of dimensionality-dependent code, such as 2D/3D "
"physical simulations"
msgstr ""

#: ../../meta.rst:9
msgid "Improve run-time performance by from run-time costs to compile time"
msgstr ""

#: ../../meta.rst:10
msgid "Simplify the development of Taichi standard library"
msgstr ""

#: ../../meta.rst:12
msgid ""
"Taichi kernels are *lazily instantiated* and a lot of computation can "
"happen at *compile-time*. Every kernel in Taichi is a template kernel, "
"even if it has no template arguments."
msgstr ""

#: ../../meta.rst:15
msgid "Dimensionality-independent programming using grouped indices"
msgstr ""

#: ../../meta.rst:34
msgid "Tensor size reflection"
msgstr ""

#: ../../meta.rst:36
msgid ""
"Sometimes it will be useful to get the dimensionality (``tensor.dim()``) "
"and shape (``tensor.shape()``) of tensors. These functions can be used in"
" both Taichi kernels and python scripts."
msgstr ""

#: ../../meta.rst:47
msgid "For sparse tensors, the full domain shape will be returned."
msgstr ""

#: ../../meta.rst:50
msgid "Compile-time evaluations"
msgstr ""

#: ../../meta.rst:51
msgid ""
"Using compile-time evaluation will allow certain computation to happen "
"when kernels are instantiated. Such computation has no overhead at "
"runtime."
msgstr ""

#: ../../meta.rst:54
msgid ""
"Use ``ti.static`` for compile-time branching (for those who come from "
"C++17, this is `if constexpr "
"<https://en.cppreference.com/w/cpp/language/if>`_.)"
msgstr ""

#: ../../meta.rst:66
msgid "Use ``ti.static`` for forced loop unrolling"
msgstr ""

#: ../../meta.rst:95
msgid "When to use for loops with ``ti.static``"
msgstr ""

#: ../../meta.rst:97
msgid "There are several reasons why ``ti.static`` for loops should be used."
msgstr ""

#: ../../meta.rst:99
msgid "Loop unrolling for performance."
msgstr ""

#: ../../meta.rst:100
msgid ""
"Loop over vector/matrix elements. Indices into Taichi matrices must be a "
"compile-time constant. Indexing into taichi tensors can be run-time "
"variables. For example, if ``x`` is a 1-D tensor of 3D vector, accessed "
"as ``x[tensor_index][matrix index]``. The first index can be variable, "
"yet the second must be a constant."
msgstr ""

#: ../../meta.rst:102
msgid "For example, code for resetting this tensor of vectors should be"
msgstr ""

