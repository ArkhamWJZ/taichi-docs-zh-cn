# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2018, Yuanming Hu
# This file is distributed under the same license as the taichi package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
msgid ""
msgstr ""
"Project-Id-Version: taichi 0.5.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-08-07 00:14+0800\n"
"PO-Revision-Date: 2020-08-07 15:13+0800\n"
"Language: zh_CN\n"
"Language-Team: \n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"
"Last-Translator: \n"
"X-Generator: Poedit 2.3.1\n"

#: ../../dev_install.rst:4
msgid "Developer installation"
msgstr "开发者安装指南"

#: ../../dev_install.rst:6
msgid ""
"Note this is for the compiler developers of the Taichi programming language. End "
"users should use the pip packages instead of building from source. To build with "
"NVIDIA GPU support, CUDA 10.0+ is needed. This installation guide works for "
"Ubuntu 16.04+ and OS X 10.14+. For precise build instructions on Windows, please "
"check out `appveyor.yml <https://github.com/taichi-dev/taichi/blob/master/"
"appveyor.yml>`_, which does basically the same thing as the following "
"instructions. We use MSBUILD.exe to build the generated project. Please note "
"that Windows could have multiple instances of MSBUILD.exe shipped with different "
"products. Please make sure you add the path for MSBUILD.exe within your MSVS "
"directory and make it a higher priority (for instance than the one shipped with ."
"NET)."
msgstr ""
"请注意，本章节是为 Taichi 编程语言的编译器开发人员所准备。终端用户应该使用 pip 进"
"行安装，而不是从源代码开始构建。为支持在 NVIDIA GPU 上进行工程构建，CUDA 10.0+是"
"必需的。本安装指南适用于 Ubuntu 16.04+ 和 OS X 10.14+。Windows 上进行构建的详细说"
"明，请查看 `appveyor.yml <https://github.com/taichi-dev/taichi/blob/master/"
"appveyor.yml>`_，Windows 下的教程基本上与 Ubtuntu 和 OS X 的教程相同。我们使用 "
"MSBUILD.exe 来构建生成的项目。需要注意的是，Windows 拥有多个 MSBUILD.exe 实例，它"
"们附带在各种版本的 MSVS 上。请确保在 MSVS 目录中添加 MSBUILD.exe 的路径，并使其具"
"有更高的优先级（例如，比附带的 .NET 优先级更高）。"

#: ../../dev_install.rst:12
msgid ""
"Note that on Linux/OS X, ``clang`` is the only supported compiler for compiling "
"the Taichi compiler. On Windows only MSVC supported."
msgstr ""
"请注意 ``clang`` 是在 Linux/OS X 下唯一支持的可以编译 Taichi 编译器的编译器。相应"
"的在 Windows 下只有 MSVC 是支持的编译器。"

#: ../../dev_install.rst:15
msgid "Installing Dependencies"
msgstr "安装依赖项"

#: ../../dev_install.rst:17
msgid "Make sure you are using Python 3.6/3.7/3.8"
msgstr "请确认你使用的 Python 版本为 3.6/3.7/3.8"

#: ../../dev_install.rst:18
msgid "Install Python dependencies:"
msgstr "安装 Python 依赖:"

#: ../../dev_install.rst:20
msgid ""
"python3 -m pip install --user setuptools astpretty astor pybind11 Pillow dill\n"
"python3 -m pip install --user pytest pytest-rerunfailures pytest-xdist yapf\n"
"python3 -m pip install --user numpy GitPython coverage colorama autograd"
msgstr ""

#: ../../dev_install.rst:27
msgid "Make sure you have ``clang`` with version >= 7:"
msgstr "确保你的 ``clang`` 版本号 >= 7:"

#: ../../dev_install.rst:29
msgid ""
"On Windows: Download `clang-10 <https://github.com/taichi-dev/taichi_assets/"
"releases/download/llvm10/clang-10.0.0-win.zip>`_. Make sure you add the ``bin`` "
"folder containing ``clang.exe`` to the ``PATH`` environment variable."
msgstr ""
"Windows 上: 下载 `clang-10 <https://github.com/taichi-dev/taichi_assets/releases/"
"download/llvm10/clang-10.0.0-win.zip>`_. 确保将包含 ``clang.exe`` 的 ``bin`` 文件"
"夹路径添加到 ``PATH`` 环境变量中。"

#: ../../dev_install.rst:32
msgid "On OS X: you don't need to do anything."
msgstr ""
"OS X 上: 不需要额外再准备什么（安装完 Xcode 命令行工具后 clang 就已经默认安装完毕"
"了）。"

#: ../../dev_install.rst:34
msgid "On Ubuntu, execute ``sudo apt install libtinfo-dev clang-8``."
msgstr "Ubuntu 上：执行 ``sudo apt install libtinfo-dev clang-8``。"

#: ../../dev_install.rst:36
msgid "On Arch Linux, execute ``sudo pacman -S clang``. (This is ``clang-10``)."
msgstr "Arch Linux 上： 执行 ``sudo pacman -S clang`` (这会安装 ``clang-10``)。"

#: ../../dev_install.rst:38
msgid ""
"On other Linux distributions, please search `this site <pkgs.org>`_ for clang "
"version >= 7."
msgstr ""
"关于其他 Linux 发行版，请从 `此网站 <pkgs.org>`_ 搜寻安装版本号 >= 7 的 clang。"

#: ../../dev_install.rst:41
msgid ""
"Make sure you have LLVM 10.0.0. Note that Taichi uses a **customized LLVM** so "
"the pre-built binaries from the LLVM official website or other sources probably "
"won't work. Here we provide LLVM binaries customized for Taichi, which may or "
"may not work depending on your system environment:"
msgstr ""
"确保你已经安装了 LLVM 10.0.0。注意，Taichi 使用的是 **定制版 LLVM**，所以从 LLVM "
"官网或其他来源下载的预构建可执行文件可能不会工作。这里我们提供了 Taichi 的定制版 "
"LLVM 可执行文件，它是否能正常工作取决于你的系统环境:"

#: ../../dev_install.rst:44
msgid ""
"`LLVM 10.0.0 for Linux <https://github.com/taichi-dev/taichi_assets/releases/"
"download/llvm10/taichi-llvm-10.0.0-linux.zip>`_"
msgstr ""

#: ../../dev_install.rst:45
msgid ""
"`LLVM 10.0.0 for Windows MSVC 2019 <https://github.com/taichi-dev/taichi_assets/"
"releases/download/llvm10/taichi-llvm-10.0.0-msvc2019.zip>`_"
msgstr ""

#: ../../dev_install.rst:46
msgid ""
"`LLVM 10.0.0 for OS X <https://github.com/taichi-dev/taichi_assets/releases/"
"download/llvm10/taichi-llvm-10.0.0-macos.zip>`_"
msgstr ""

#: ../../dev_install.rst:50
msgid ""
"On Windows, if you use the pre-built LLVM for Taichi, please add ``$LLVM_FOLDER/"
"bin`` to ``PATH``. Later, when you build Taichi using ``CMake``, set "
"``LLVM_DIR`` to ``$LLVM_FOLDER/lib/cmake/llvm``."
msgstr ""
"在 Windows 下, 如果你使用的是 Taichi 版预构建的 LLVM, 请将 ``$LLVM_FOLDER/bin`` "
"添加到 ``PATH``。随后，当你使用 ``CMake`` 构建 Taichi 时，将 ``LLVM_DIR`` 设置到 "
"``$LLVM_FOLDER/lib/cmake/llvm``."

#: ../../dev_install.rst:54
msgid "If the downloaded LLVM does not work, please build from source:"
msgstr "如果下载的 LLVM 不能正常工作，请从源代码开始构建："

#: ../../dev_install.rst:56
msgid "On Linux or OS X:"
msgstr "Linux 或 OS X 上:"

#: ../../dev_install.rst:58
msgid ""
"wget https://github.com/llvm/llvm-project/releases/download/llvmorg-10.0.0/"
"llvm-10.0.0.src.tar.xz\n"
"tar xvJf llvm-10.0.0.src.tar.xz\n"
"cd llvm-10.0.0.src\n"
"mkdir build\n"
"cd build\n"
"cmake .. -DLLVM_ENABLE_RTTI:BOOL=ON -DBUILD_SHARED_LIBS:BOOL=OFF -"
"DCMAKE_BUILD_TYPE=Release -DLLVM_TARGETS_TO_BUILD=\"X86;NVPTX\" -"
"DLLVM_ENABLE_ASSERTIONS=ON\n"
"# If you are building on NVIDIA Jetson TX2, use -DLLVM_TARGETS_TO_BUILD=\"ARM;"
"NVPTX\"\n"
"\n"
"make -j 8\n"
"sudo make install\n"
"\n"
"# Check your LLVM installation\n"
"llvm-config --version  # You should get 10.0.0"
msgstr ""
"wget https://github.com/llvm/llvm-project/releases/download/llvmorg-10.0.0/"
"llvm-10.0.0.src.tar.xz\n"
"tar xvJf llvm-10.0.0.src.tar.xz\n"
"cd llvm-10.0.0.src\n"
"mkdir build\n"
"cd build\n"
"cmake .. -DLLVM_ENABLE_RTTI:BOOL=ON -DBUILD_SHARED_LIBS:BOOL=OFF -"
"DCMAKE_BUILD_TYPE=Release -DLLVM_TARGETS_TO_BUILD=“X86;NVPTX” -"
"DLLVM_ENABLE_ASSERTIONS=ON\n"
"# 如果你想在 NVIDIA Jetson TX2 上进行构建, 请使用 -DLLVM_TARGETS_TO_BUILD=\"ARM;"
"NVPTX\"\n"
"\n"
"make -j 8\n"
"sudo make install\n"
"\n"
"# 检查你安装的 LLVM 版本\n"
"llvm-config —version  # 应该是 10.0.0"

#: ../../dev_install.rst:74
msgid "On Windows:"
msgstr "Windows上:"

#: ../../dev_install.rst:76
msgid ""
"# LLVM 10.0.0 + MSVC 2019\n"
"cmake .. -G\"Visual Studio 16 2019\" -A x64 -DLLVM_ENABLE_RTTI:BOOL=ON -"
"DBUILD_SHARED_LIBS:BOOL=OFF -DCMAKE_BUILD_TYPE=Release -DLLVM_TARGETS_TO_BUILD="
"\"X86;NVPTX\" -DLLVM_ENABLE_ASSERTIONS=ON -Thost=x64 -DLLVM_BUILD_TESTS:BOOL=OFF "
"-DCMAKE_INSTALL_PREFIX=installed"
msgstr ""

#: ../../dev_install.rst:81
msgid "Then open ``LLVM.sln`` and use Visual Studio 2017+ to build."
msgstr "然后打开 ``LLVM.sln`` 并使用 Visual Studio 2017+ 进行构建."

#: ../../dev_install.rst:82
msgid ""
"Please make sure you are using the ``Release`` configuration. After building the "
"``INSTALL`` project (under folder ``CMakePredefinedTargets`` in the Solution "
"Explorer window)."
msgstr ""
"请确保你正在使用的是 ``Release`` 模式。随后进行构建 ``INSTALL`` （在 Solution "
"Explorer 窗口的 ``CMakePredefinedTargets`` 文件夹下）。"

#: ../../dev_install.rst:83
msgid ""
"If you use MSVC 2019, **make sure you use C++17** for the ``INSTALL`` project."
msgstr "如果你使用的是 MSVC 2019, **确保你通过 C++17** 构建 ``INSTALL`` 。"

#: ../../dev_install.rst:84
msgid ""
"After the build is complete, find your LLVM binaries and headers in ``build/"
"installed``."
msgstr ""
"在完成构建之后，你可以在 ``build/installed`` 中找到 LLVM 可执行文件和头文件。"

#: ../../dev_install.rst:86
msgid ""
"Please add ``build/installed/bin`` to ``PATH``. Later, when you build Taichi "
"using ``CMake``, set ``LLVM_DIR`` to ``build/installed/lib/cmake/llvm``."
msgstr ""
"请将 ``build/installed/bin`` 添加到 ``PATH``。随后，当你使用 ``CMake`` 构建 "
"Taichi 时，将 ``LLVM_DIR`` 设置到 ``build/installed/lib/cmake/llvm``."

#: ../../dev_install.rst:91
msgid "Setting up CUDA (optional)"
msgstr "安装并配置CUDA（可选）"

#: ../../dev_install.rst:93
msgid ""
"If you don't have CUDA, go to `this website <https://developer.nvidia.com/cuda-"
"downloads>`_ and download the installer."
msgstr ""
"如果你没有安装CUDA，请到 `英伟达官网 <https://developer.nvidia.com/cuda-"
"downloads>`_ 下载安装器。"

#: ../../dev_install.rst:95
msgid ""
"To check if CUDA is installed, run ``nvcc --version`` or ``cat /usr/local/cuda/"
"version.txt``."
msgstr ""
"请运行 ``nvcc —version`` 或 ``cat /usr/local/cuda/version.txt`` 来检查CUDA是否已"
"安装成功。"

#: ../../dev_install.rst:96
msgid "On **Ubuntu** we recommend choosing ``deb (local)`` as **Installer Type**."
msgstr ""
"在 **Ubuntu** 下我们推荐选择 ``deb (local)`` 来作为 **安装器类型（Installer "
"Type）**。"

#: ../../dev_install.rst:97
msgid ""
"On **Arch Linux**, you can easily install CUDA via ``pacman -S cuda`` without "
"downloading the installer manually."
msgstr ""
"在 **Arch Linux** 下，你可以轻松地通过 ``pacman -S cuda`` 来安装CUDA并跳过手动下"
"载安装器的环节。"

#: ../../dev_install.rst:103
msgid "Setting up Taichi for development"
msgstr "开发者的 Taichi 配置"

#: ../../dev_install.rst:105
msgid "Set up environment variables for Taichi:"
msgstr "为 Taichi 设置环境变量:"

#: ../../dev_install.rst:107
msgid ""
"On Linux / OS X, please add the following script to your rc file (``~/.bashrc``, "
"``~/.zshrc`` or etc. , same for other occurrences in this documentation):"
msgstr ""
"Linux / OS X 上, 请将以下脚本添加到你的配置文件中（如 ``~/.bashrc``, ``~/."
"zshrc`` 等，本文档中的其他示例和这里一样，请自动与你的配置文件相对应):"

#: ../../dev_install.rst:109
msgid ""
"export TAICHI_REPO_DIR=/path/to/taichi  # Path to your taichi repository\n"
"export PYTHONPATH=$TAICHI_REPO_DIR/python:$PYTHONPATH\n"
"export PATH=$TAICHI_REPO_DIR/bin:$PATH\n"
"# export CXX=/path/to/clang  # Uncomment if you encounter issue about compiler "
"in the next step.\n"
"# export PATH=/opt/llvm/bin:$PATH  # Uncomment if your llvm or clang is "
"installed in /opt"
msgstr ""
"export TAICHI_REPO_DIR=/path/to/taichi  # 指向你的 taichi 仓库的路径\n"
"export PYTHONPATH=$TAICHI_REPO_DIR/python:$PYTHONPATH\n"
"export PATH=$TAICHI_REPO_DIR/bin:$PATH\n"
"# export CXX=/path/to/clang  # 如果在下一步遇到关于编译器的问题，取消这个注释。\n"
"# export PATH=/opt/llvm/bin:$PATH  # 如果你的 llvm 或 clang 安装到了 /opt 中，取"
"消这个注释"

#: ../../dev_install.rst:117
msgid "Then execute ``source ~/.bashrc`` to reload shell config."
msgstr "执行 ``source ~/.bashrc`` 来重载 shell 的配置。"

#: ../../dev_install.rst:119
msgid "On Windows, please add these variables by accessing your system settings:"
msgstr "Windows 上，请通过访问你的系统设置来添加以下这些变量:"

#: ../../dev_install.rst:121
msgid ""
"Add ``TAICHI_REPO_DIR`` whose value is the path to your taichi repository so "
"that Taichi knows you're a developer."
msgstr ""
"添加 ``TAICHI_REPO_DIR``，其值指向你的 Taichi 仓库存储路径，以便让 Taichi 知道你"
"是一名开发者。"

#: ../../dev_install.rst:122
msgid ""
"Add or append ``PYTHONPATH`` with ``%TAICHI_REPO_DIR%/python`` so that Python "
"imports Taichi from the local repo."
msgstr ""
"添加或追加 ``%TAICHI_REPO_DIR%/python`` 到 ``PYTHONPATH`` ，以便 Python 可以从本"
"地仓库导入 Taichi。"

#: ../../dev_install.rst:123
msgid ""
"Add or append ``PATH`` with ``%TAICHI_REPO_DIR%/bin`` so that you can use ``ti`` "
"command."
msgstr ""
"添加或追加 ``%TAICHI_REPO_DIR%/bin`` 到 ``PATH``，这样你就可以使用 ``ti`` 命令"
"了。"

#: ../../dev_install.rst:124
msgid ""
"Add or append ``PATH`` with path to LLVM binary directory installed in previous "
"section."
msgstr "添加或追加之前小节安装的 LLVM 可执行文件路径到 ``PATH``。"

#: ../../dev_install.rst:126
msgid "Clone the taichi repo **recursively**, and build:"
msgstr "请 **递归地** 克隆 Taichi 代码库，然后构建："

#: ../../dev_install.rst:128
msgid ""
"git clone https://github.com/taichi-dev/taichi --depth=1 --branch=master\n"
"cd taichi\n"
"git submodule update --init --recursive --depth=1\n"
"mkdir build\n"
"cd build\n"
"cmake ..\n"
"# On Linux / OS X, if you do not set clang as the default compiler\n"
"# use the line below:\n"
"#   cmake .. -DCMAKE_CXX_COMPILER=clang\n"
"#\n"
"# Alternatively, if you would like to set clang as the default compiler\n"
"# On Unix CMake honors environment variables $CC and $CXX upon deciding which C "
"and C++ compilers to use\n"
"make -j 8"
msgstr ""
"git clone https://github.com/taichi-dev/taichi —depth=1 —branch=master\n"
"cd taichi\n"
"git submodule update —init —recursive —depth=1\n"
"mkdir build\n"
"cd build\n"
"cmake ..\n"
"# 在 Linux / OS X 下, 如果你没有将clang设置为默认编译器\n"
"# 或者，如果你希望将 clang 设置为默认编译器\n"
"# 请使用下面这行命令:\n"
"#   cmake .. -DCMAKE_CXX_COMPILER=clang\n"
"#\n"
"# 在Unix上，在决定对C和C++使用哪个编译器时，CMake会考虑到环境变量$CC和$CXX\n"
"make -j 8"

#: ../../dev_install.rst:144
msgid ""
"Check out ``examples`` for runnable examples. Run them with commands like "
"``python3 examples/mpm128.py``."
msgstr ""
"查看 ``examples`` 下提供的可运行示例程序。例如使用 ``python3 examples/mpm128."
"py`` 这种方式运行它们。"

#: ../../dev_install.rst:145
msgid ""
"Execute ``python3 -m taichi test`` to run all the tests. It may take up to 5 "
"minutes to run all tests."
msgstr ""
"执行 ``python3 -m taichi test`` 来运行所有的测试。运行所有测试用例可能会耗费长达5"
"分钟的时间。"

#: ../../dev_install.rst:149
msgid "Troubleshooting Developer Installation"
msgstr "安装中的故障排除"

#: ../../dev_install.rst:151
msgid ""
"If ``make`` fails to compile and reports ``fatal error: 'spdlog/XXX.h' file not "
"found``, please try runing ``git submodule update --init --recursive --depth=1``."
msgstr ""
"如果编译时 ``make`` 失败并且报告 ``fatal error: ‘spdlog/XXX.h’ file not found``, "
"请尝试执行 ``git submodule update —init —recursive —depth=1``."

#: ../../dev_install.rst:155
msgid "If importing Taichi causes"
msgstr "如果导入 Taichi 时引发错误"

#: ../../dev_install.rst:157
msgid ""
"FileNotFoundError: [Errno 2] No such file or directory: '/root/taichi/python/"
"taichi/core/../lib/taichi_core.so' -> '/root/taichi/python/taichi/core/../lib/"
"libtaichi_core.so'``"
msgstr ""

#: ../../dev_install.rst:161
msgid ""
"Please try adding ``TAICHI_REPO_DIR`` to environment variables, see :ref:"
"`dev_env_settings`."
msgstr ""
"请尝试将 ``TAICHI_REPO_DIR`` 添加到环境变量中, 详见 :ref:`dev_env_settings`."

#: ../../dev_install.rst:163
msgid ""
"If the build succeeded but running any Taichi code results in errors like "
"``Bitcode file (/tmp/taichi-tero94pl/runtime//runtime_x64.bc) not found``, "
"please double check ``clang`` is in your ``PATH``:"
msgstr ""
"如果构建过程是顺利的，但运行任何 Taichi 代码时却有报错信息，如 ``Bitcode file (/"
"tmp/taichi-tero94pl/runtime//runtime_x64.bc) not found``，请再检查一遍 ``clang`` "
"是否在你的 ``PATH`` 中:"

#: ../../dev_install.rst:166
msgid ""
"clang --version\n"
"# version should be >= 7"
msgstr ""
"clang --version\n"
"# 版本号应该 >= 7"

#: ../../dev_install.rst:171
msgid "and our **Taichi configured** ``llvm-as``:"
msgstr "还有我们的 **Taichi 定制版配置** ``llvm-as``:"

#: ../../dev_install.rst:173
msgid ""
"llvm-as --version\n"
"# version should be >= 8\n"
"which llvm-as\n"
"# should be /usr/local/bin/llvm-as or /opt/XXX/bin/llvm-as, which is our "
"configured installation"
msgstr ""
"llvm-as —version\n"
"# 版本号应该 >= 8\n"
"which llvm-as\n"
"# 应该输出 /usr/local/bin/llvm-as 或 /opt/XXX/bin/llvm-as, 这是我们的配置文件所在"
"位置"

#: ../../dev_install.rst:180
msgid ""
"If not, please install ``clang`` and **build LLVM from source** with "
"instructions above in :ref:`dev_install`, then add their path to environment "
"variable ``PATH``."
msgstr ""
"如果不是, 请按照上面的教程 :ref:`dev_install` 安装 ``clang`` 并 **从源码开始构建 "
"LLVM** , 然后将它们的路径添加到环境变量 ``PATH`` 中。"

#: ../../dev_install.rst:182
msgid ""
"If you encounter other issues, feel free to report by `opening an issue on "
"GitHub <https://github.com/taichi-dev/taichi/issues/new?labels=potential"
"+bug&template=bug_report.md>`_. We are willing to help!"
msgstr ""
"如果你遇到了其他问题，请在 Github 上随时提出 `issue <https://github.com/taichi-"
"dev/taichi/issues/new?labels=potential+bug&template=bug_report.md>`_ 进行报告， "
"我们很愿意帮忙!"

#: ../../dev_install.rst:184
msgid ""
"See also :ref:`troubleshooting` for issues that may share with end-user "
"installation."
msgstr ""
"请参阅 :ref:`troubleshooting` 以了解那些可能与终端用户安装时遇到的相同问题。"

#: ../../dev_install.rst:187
msgid "Docker"
msgstr ""

#: ../../dev_install.rst:189
msgid ""
"For those who prefer to use Docker, we also provide a Dockerfile which helps "
"setup the Taichi development environment with CUDA support based on Ubuntu "
"docker image."
msgstr ""
"对于那些更喜欢使用 Docker 的开发者，我们也提供了一个 Dockerfile，它可以帮助开发者"
"建立起基于 Ubuntu Docker 镜像的 Taichi 开发环境（支持CUDA）。"

#: ../../dev_install.rst:193
msgid ""
"In order to follow the instructions in this section, please make sure you have "
"the `Docker DeskTop (or Engine for Linux) <https://www.docker.com/products/"
"docker-desktop>`_ installed and set up properly."
msgstr ""
"如要遵照本节中的说明，请确保你已经安装并正确设置了 `Docker DeskTop (或 Engine "
"for Linux) <https://www.docker.com/products/docker-desktop>`_ 。"

#: ../../dev_install.rst:198
msgid "Build the Docker Image"
msgstr "构建 Docker 镜像"

#: ../../dev_install.rst:199
msgid ""
"From within the root directory of the taichi Git repository, execute ``docker "
"build -t taichi:latest .`` to build a Docker image based off the local master "
"branch tagged with *latest*. Since this builds the image from source, please "
"expect up to 40 mins build time if you don't have cached Docker image layers."
msgstr ""
"在 taichi Git 仓库的根目录下，执行 ``docker build -t taichi:latest .`` 以此基于标"
"记为 *latest* 的本地主分支构建 docker 镜像。由于这是从源文件构建镜像，如果你没有"
"缓存的 Docker 镜像层，预计会有 40 分钟左右的构建时间。"

#: ../../dev_install.rst:204
msgid ""
"In order to save the time on building Docker images, you could always visit our "
"`Docker Hub repository <https://hub.docker.com/r/taichidev/taichi>`_ and pull "
"the versions of pre-built images you would like to use. Currently the builds are "
"triggered per taichi Github release."
msgstr ""
"为节省构建 Docker 镜像的时间，你可以随时访问我们的 `Docker Hub 仓库 <https://hub."
"docker.com/r/taichidev/taichi>`_，并拉取你想要使用的预构建镜像版本。目前，每个版"
"本的构建都是在 taichi Github 版本发行时触发。"

#: ../../dev_install.rst:207
msgid ""
"For example, to pull a image built from release v0.6.17, run ``docker pull "
"taichidev/taichi:v0.6.17``"
msgstr ""
"例如，要拉取版本 v0.6.17 构建的映像，请运行 ``docker pull taichidev/taichi:"
"v0.6.17``"

#: ../../dev_install.rst:210
msgid "Use Docker Image on macOS (cpu only)"
msgstr "在 macOS 下使用 Docker 镜像（仅支持cpu）"

#: ../../dev_install.rst:211
msgid "Make sure ``XQuartz`` and ``socat`` are installed:"
msgstr "确保已经提前安装好了 ``XQuartz`` 和 ``socat`` :"

#: ../../dev_install.rst:213
msgid ""
"brew cask install xquartz\n"
"brew install socat"
msgstr ""

#: ../../dev_install.rst:218 ../../dev_install.rst:239
msgid "Temporally disable the xhost access-control: ``xhost +``"
msgstr "暂时禁用 xhost 的访问控制: ``xhost +``"

#: ../../dev_install.rst:219
msgid ""
"Start the Docker container with ``docker run -it -e DISPLAY=$(ipconfig getifaddr "
"en0):0 taichidev/taichi:v0.6.17``"
msgstr ""
"启动 Docker 容器 ``docker run -it -e DISPLAY=$(ipconfig getifaddr en0):0 "
"taichidev/taichi:v0.6.17``"

#: ../../dev_install.rst:220 ../../dev_install.rst:241
msgid ""
"Do whatever you want within the container, e.g. you could run tests or an "
"example, try: ``ti test`` or ``ti example mpm88``"
msgstr ""
"在容器内执行各种你想要的操作，例如，可以通过尝试 ``ti test``或 ``ti example "
"mpm88`` 运行测试或示例"

#: ../../dev_install.rst:221 ../../dev_install.rst:242
msgid "Exit from the container with ``exit`` or ``ctrl+D``"
msgstr "通过 Exit 或 ctrl+D 退出容器"

#: ../../dev_install.rst:222 ../../dev_install.rst:243
msgid "[To keep your xhost safe] Re-enable the xhost access-control: ``xhost -``"
msgstr "[为确保你的 xhost 安全]重新启用 xhost 的访问控制: ``xhost -``"

#: ../../dev_install.rst:225
msgid "Use Docker Image on Ubuntu (with CUDA support)"
msgstr "在 Ubuntu 下使用 Docker 镜像（仅支持CUDA）"

#: ../../dev_install.rst:226
msgid ""
"Make sure your host machine has CUDA properly installed and configured. Usually "
"you could verify it by running ``nvidia-smi``"
msgstr ""
"确保你的主机已经正确安装并配置了 CUDA。通常可以通过运行 ``nvidia-smi`` 进行验证"

#: ../../dev_install.rst:227
msgid ""
"Make sure ` NVIDIA Container Toolkit <https://github.com/NVIDIA/nvidia-docker>`_ "
"is properly installed:"
msgstr ""
"确保 `NVIDIA Container Toolkit <https://github.com/NVIDIA/nvidia-docker>`_ 正确安"
"装完毕："

#: ../../dev_install.rst:229
msgid ""
"distribution=$(. /etc/os-release;echo $ID$VERSION_ID)\n"
"curl -s -L https://nvidia.github.io/nvidia-docker/gpgkey | sudo apt-key add -\n"
"curl -s -L https://nvidia.github.io/nvidia-docker/$distribution/nvidia-docker."
"list | sudo tee /etc/apt/sources.list.d/nvidia-docker.list\n"
"\n"
"sudo apt-get update && sudo apt-get install -y nvidia-container-toolkit\n"
"sudo systemctl restart docker"
msgstr ""

#: ../../dev_install.rst:238
msgid "Make sure ``xorg`` is installed: ``sudo apt-get install xorg``"
msgstr "确保 ``xorg`` 已经安装完毕：``sudo apt-get install xorg``"

#: ../../dev_install.rst:240
msgid ""
"Start the Docker container with ``sudo docker run -it --gpus all -e DISPLAY="
"$DISPLAY -v /tmp/.X11-unix:/tmp/.X11-unix taichidev/taichi:v0.6.17``"
msgstr ""
"通过 ``sudo docker run -it —gpus all -e DISPLAY=$DISPLAY -v /tmp/.X11-unix:/tmp/."
"X11-unix taichidev/taichi:v0.6.17`` 启动Docker容器"

#: ../../dev_install.rst:246
msgid ""
"The nature of Docker container determines that no changes to the file system on "
"the container could be preserved once you exit from the container. If you want "
"to use Docker as a persistent development environment, we recommend you `mount "
"the taichi Git repository to the container as a volume <https://docs.docker.com/"
"storage/volumes/>`_ and set the Python path to the mounted directory."
msgstr ""
"Docker 容器的特性决定了一旦你退出容器，就不能保留对容器上文件系统的任何修改。如果"
"你想使用 Docker 作为持久的开发环境，我们建议你 `挂载 taichi Git 仓库为容器的一个 "
"Volume <https://docs.docker.com/storage/volumes/>`_，并将 Python 路径设置到挂载目"
"录下。"

#~ msgid ""
#~ "Note this is for the compiler developers of the Taichi programming language. "
#~ "End users should use the pip packages instead of building from source. To "
#~ "build with NVIDIA GPU support, CUDA 10.0+ is needed. This installation guide "
#~ "works for Ubuntu 16.04+ and OS X 10.14+. For precise build instructions on "
#~ "Windows, please check out `appveyor.yml <https://github.com/taichi-dev/taichi/"
#~ "blob/master/appveyor.yml>`_, which does basically the same thing as the "
#~ "following instructions."
#~ msgstr ""
#~ "请注意本指南是面向Taichi编程语言的编译器开发者的。Taichi的终端用户请使用pip安"
#~ "装包而避免从源码构建。构建支持NVIDIA GPU的版本需要CUDA 10.0+的支持。本指南兼容"
#~ "Ubuntu 16.04+和OS X 10.14+。Windows下的较为严格的构建指南请参考 `appveyor.yml "
#~ "<https://github.com/taichi-dev/taichi/blob/master/appveyor.yml>`_ ， 链接中流"
#~ "程基本与下面的说明保持一致。"

#~ msgid "Execute"
#~ msgstr "执行"

#~ msgid "Make sure you have LLVM 8.0.1 built from source. To do so:"
#~ msgstr "请确认你从源码构建构建了LLVM 8.0.1。流程如下所示："

#~ msgid ""
#~ "wget https://github.com/llvm/llvm-project/releases/download/llvmorg-8.0.1/"
#~ "llvm-8.0.1.src.tar.xz\n"
#~ "tar xvJf llvm-8.0.1.src.tar.xz\n"
#~ "cd llvm-8.0.1.src\n"
#~ "mkdir build\n"
#~ "cd build\n"
#~ "cmake .. -DLLVM_ENABLE_RTTI:BOOL=ON -DBUILD_SHARED_LIBS:BOOL=OFF -"
#~ "DCMAKE_BUILD_TYPE=Release -DLLVM_TARGETS_TO_BUILD=\"X86;NVPTX\" -"
#~ "DLLVM_ENABLE_ASSERTIONS=ON\n"
#~ "# If you are building on NVIDIA Jetson TX2, use -DLLVM_TARGETS_TO_BUILD=\"ARM;"
#~ "NVPTX\"\n"
#~ "make -j 8\n"
#~ "sudo make install"
#~ msgstr ""
#~ "wget https://github.com/llvm/llvm-project/releases/download/llvmorg-8.0.1/"
#~ "llvm-8.0.1.src.tar.xz\n"
#~ "tar xvJf llvm-8.0.1.src.tar.xz\n"
#~ "cd llvm-8.0.1.src\n"
#~ "mkdir build\n"
#~ "cd build\n"
#~ "cmake .. -DLLVM_ENABLE_RTTI:BOOL=ON -DBUILD_SHARED_LIBS:BOOL=OFF -"
#~ "DCMAKE_BUILD_TYPE=Release -DLLVM_TARGETS_TO_BUILD=“X86;NVPTX” -"
#~ "DLLVM_ENABLE_ASSERTIONS=ON\n"
#~ "# 如果你在NVIDIA Jetson TX2上构建，使用-DLLVM_TARGETS_TO_BUILD=“ARM;NVPTX”\n"
#~ "make -j 8\n"
#~ "sudo make install"

#~ msgid "Prebuilt LLVM for Windows CI"
#~ msgstr "为Windows 持续集成服务（CI）预先构建的LLVM"

#~ msgid ""
#~ "Then use Visual Studio to build. After building the ``INSTALL`` project "
#~ "(under folder \"CMakePredefinedTargets\"). After build completes, find your "
#~ "LLVM binaries/headers in `build/include`."
#~ msgstr "然后使用Visual Studio来进行构建。"

#~ msgid "On other Linux distributions, please build clang 8.0.1 from source:"
#~ msgstr "（在其他Linux发行版下）请从源码构建构建clang 8.0.1："

#~ msgid "Add the following script to your ``~/.bashrc``:"
#~ msgstr "将下面的脚本添加至你的 ``~/.bashrc`` 配置文件："

#~ msgid ""
#~ "export TAICHI_REPO_DIR=/home/XXX/taichi  # Path to your taichi repository\n"
#~ "export PYTHONPATH=$TAICHI_REPO_DIR/python/:$PYTHONPATH\n"
#~ "export PATH=$TAICHI_REPO_DIR/bin/:$PATH\n"
#~ "# export PATH=/opt/llvm/bin:$PATH # Uncomment if your llvm-8 or clang-8 is "
#~ "in /opt"
#~ msgstr ""
#~ "export TAICHI_REPO_DIR=/home/XXX/taichi  # Path to your taichi repository\n"
#~ "export PYTHONPATH=$TAICHI_REPO_DIR/python/:$PYTHONPATH\n"
#~ "export PATH=$TAICHI_REPO_DIR/bin/:$PATH\n"
#~ "# export PATH=/opt/llvm/bin:$PATH # 反注释这行如果你的llvm-8或clang-8在/opt目"
#~ "录下"

#~ msgid "Troubleshooting"
#~ msgstr "故障排除"

#~ msgid "Run with debug mode to see if there's any illegal memory access"
#~ msgstr "在调试模式（debug mode）下运行以检查是否有任何的非法内存访问"

#~ msgid ""
#~ "Disable compiler optimizations to quickly confirm that the issue is not cause "
#~ "by optimization"
#~ msgstr "禁用编译器优化来快速确认问题并非是由优化引起的"
