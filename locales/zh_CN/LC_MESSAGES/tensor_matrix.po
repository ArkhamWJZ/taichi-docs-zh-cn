# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2018, Yuanming Hu
# This file is distributed under the same license as the taichi package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: taichi 0.5.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-04-21 16:57+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"

#: ../../tensor_matrix.rst:4
msgid "Tensors and matrices"
msgstr ""

#: ../../tensor_matrix.rst:6
msgid ""
"Tensors are global variables provided by Taichi. Tensors can be either "
"sparse or dense. An element of a tensor can be either a scalar or a "
"vector/matrix."
msgstr ""

#: ../../tensor_matrix.rst:9
msgid ""
"Although mathematically matrices are treated as 2D tensors, in Taichi, "
"**tensor** and **matrix** are two completely different things. Matrices "
"can be used as tensor elements, so you have tensors of matrices."
msgstr ""

#: ../../tensor_matrix.rst:12
msgid "Tensors of scalars"
msgstr ""

#: ../../tensor_matrix.rst:13
msgid "Every global variable is an N-dimensional tensor."
msgstr ""

#: ../../tensor_matrix.rst:14
msgid "Global `scalars` are treated as 0-D tensors of scalars."
msgstr ""

#: ../../tensor_matrix.rst:15
msgid ""
"Tensors are accessed using indices, e.g. ``x[i, j, k]`` if ``x`` is a "
"scalar 3D tensor. For a 0-D tensor, access it as ``x[None]``."
msgstr ""

#: ../../tensor_matrix.rst:16
msgid ""
"Even when accessing 0-D tensor ``x``, use ``x[None] = 0`` instead of ``x "
"= 0``. Please always use indexing to access entries in tensors."
msgstr ""

#: ../../tensor_matrix.rst:17
msgid "Tensor values are initially zero."
msgstr ""

#: ../../tensor_matrix.rst:18
msgid "Sparse tensors are initially inactive."
msgstr ""

#: ../../tensor_matrix.rst:19
msgid "See :ref:`scalar_tensor` for more details."
msgstr ""

#: ../../tensor_matrix.rst:23
msgid "Tensors of matrices"
msgstr ""

#: ../../tensor_matrix.rst:24
msgid ""
"Suppose you have a ``128 x 64`` global grid ``A``, each node containing a"
" ``3 x 2`` matrices. In this case you need to allocate a ``128 x 64`` "
"tensor of ``3 x 2`` matrix, using the statement ``A = ti.Matrix(3, 2, "
"dt=ti.f32, shape=(128, 64))``."
msgstr ""

#: ../../tensor_matrix.rst:26
msgid ""
"If you want to get the matrix of grid node ``i, j``, please use ``mat = "
"A[i, j]``. ``mat`` is simply a ``3 x 2`` matrix"
msgstr ""

#: ../../tensor_matrix.rst:27
msgid ""
"To get the element on the first row and second column of that matrix, use"
" ``mat[0, 1]`` or ``A[i, j][0, 1]``."
msgstr ""

#: ../../tensor_matrix.rst:28
msgid ""
"As you may have noticed, there are two indexing operators ``[]``, the "
"first is for tensor indexing, the second for matrix indexing."
msgstr ""

#: ../../tensor_matrix.rst:29
msgid ""
"For a tensor ``F`` of element ``ti.Matrix``, make sure you first index "
"the tensor dimensions, and then the matrix dimensions: ``F[i, j, k][0, "
"2]``. (Assuming ``F`` is a 3D tensor with ``ti.Matrix`` of size ``3x3`` "
"as elements)"
msgstr ""

#: ../../tensor_matrix.rst:30
msgid "``ti.Vector`` is simply an alias of ``ti.Matrix``."
msgstr ""

#: ../../tensor_matrix.rst:31
msgid "See :ref:`linalg` for more on matrices."
msgstr ""

#: ../../tensor_matrix.rst:35
msgid "Matrix size"
msgstr ""

#: ../../tensor_matrix.rst:36
msgid ""
"For performance reasons matrix operations will be unrolled, therefore we "
"suggest using only small matrices. For example, ``2x1``, ``3x3``, ``4x4``"
" matrices are fine, yet ``32x6`` is probably too big as a matrix size."
msgstr ""

#: ../../tensor_matrix.rst:41
msgid ""
"Due to the unrolling mechanisms, operating on large matrices (e.g. "
"``32x128``) can lead to long compilation time and low performance."
msgstr ""

#: ../../tensor_matrix.rst:43
msgid ""
"If you have a dimension that is too large (e.g. ``64``), it's better to "
"declare a tensor of size ``64``. E.g., instead of declaring "
"``ti.Matrix(64, 32, dt=ti.f32, shape=(3, 2))``, declare ``ti.Matrix(3, 2,"
" dt=ti.f32, shape=(64, 32))``. Try to put large dimensions to tensors "
"instead of matrices."
msgstr ""

