# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2018, Yuanming Hu
# This file is distributed under the same license as the taichi package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: taichi 0.5.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-04-24 11:24+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"

#: ../../external.rst:2
msgid "Interacting with external arrays"
msgstr ""

#: ../../external.rst:4
msgid "Here ``external arrays`` refer to ``numpy.ndarray`` or ``torch.Tensor``."
msgstr ""

#: ../../external.rst:7
msgid "Conversion between Taichi tensors and external arrays"
msgstr ""

#: ../../external.rst:9
msgid "Use ``to_numpy``/``from_numpy``/``to_torch``/``from_torch``:"
msgstr ""

#: ../../external.rst:11
msgid ""
"n = 4\n"
"m = 7\n"
"\n"
"# Taichi tensors\n"
"val = ti.var(ti.i32, shape=(n, m))\n"
"vec = ti.Vector(3, dt=ti.i32, shape=(n, m))\n"
"mat = ti.Matrix(3, 4, dt=ti.i32, shape=(n, m))\n"
"\n"
"# Scalar\n"
"arr = np.ones(shape=(n, m), dtype=np.int32)\n"
"\n"
"val.from_numpy(arr)\n"
"\n"
"arr = val.to_numpy()\n"
"\n"
"# Vector\n"
"arr = np.ones(shape=(n, m, 3), dtype=np.int32)\n"
"\n"
"vec.from_numpy(arr)\n"
"\n"
"arr = np.ones(shape=(n, m, 3, 1), dtype=np.int32)\n"
"vec.from_numpy(arr)\n"
"\n"
"arr = vec.to_numpy()\n"
"assert arr.shape == (n, m, 3, 1)\n"
"\n"
"arr = vec.to_numpy(as_vector=True)\n"
"assert arr.shape == (n, m, 3)\n"
"\n"
"# Matrix\n"
"arr = np.ones(shape=(n, m, 3, 4), dtype=np.int32)\n"
"\n"
"mat.from_numpy(arr)\n"
"\n"
"arr = mat.to_numpy()\n"
"assert arr.shape == (n, m, 3, 4)"
msgstr ""

#: ../../external.rst:52
msgid "Use external arrays as Taichi kernel parameters"
msgstr ""

#: ../../external.rst:54
msgid ""
"The type hint for external array parameters is ``ti.ext_arr()``. Please "
"see the example below. Note that struct-for's on external arrays are not "
"supported."
msgstr ""

#: ../../external.rst:57
msgid ""
"n = 4\n"
"m = 7\n"
"\n"
"val = ti.var(ti.i32, shape=(n, m))\n"
"\n"
"@ti.kernel\n"
"def test_numpy(arr: ti.ext_arr()):\n"
"  for i in range(n):\n"
"    for j in range(m):\n"
"      arr[i, j] += i + j\n"
"\n"
"a = np.empty(shape=(n, m), dtype=np.int32)\n"
"\n"
"for i in range(n):\n"
"  for j in range(m):\n"
"    a[i, j] = i * j\n"
"\n"
"test_numpy(a)\n"
"\n"
"for i in range(n):\n"
"  for j in range(m):\n"
"    assert a[i, j] == i * j + i + j"
msgstr ""

