# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2018, Yuanming Hu
# This file is distributed under the same license as the taichi package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: taichi 0.5.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-05-07 01:24-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"

#: ../../atomic.rst:4
msgid "Atomic operations"
msgstr ""

#: ../../atomic.rst:6
msgid ""
"In Taichi, augmented assignments (e.g., ``x[i] += 1``) are automatically "
"`atomic <https://en.wikipedia.org/wiki/Fetch-and-add>`_."
msgstr ""

#: ../../atomic.rst:11
msgid ""
"When accumulating to global variables in parallel, make sure you use "
"atomic operations. For example, to compute the sum of all elements in "
"``x``, ::"
msgstr ""

#: ../../atomic.rst:14
msgid ""
"@ti.kernel\n"
"def sum():\n"
"    for i in x:\n"
"        # Approach 1: OK\n"
"        total[None] += x[i]\n"
"\n"
"        # Approach 2: OK\n"
"        ti.atomic_add(total[None], x[i])\n"
"\n"
"        # Approach 3: Wrong result since the operation is not atomic.\n"
"        total[None] = total[None] + x[i]"
msgstr ""

#: ../../atomic.rst:28
msgid ""
"When atomic operations are applied to local values, the Taichi compiler "
"will try to demote these operations into their non-atomic correspondence."
msgstr ""

#: ../../atomic.rst:30
msgid ""
"Apart from augmented assignments, explicit atomic operations such as "
"``ti.atomic_add`` also do read-modify-write atomically. These operations "
"additionally return the **old value** of the first argument. Below is the"
" full list of explicit atomic operations:"
msgstr ""

#: ../../atomic.rst:36
msgid "Atomically compute ``x + y``/``x - y`` and store the result to ``x``."
msgstr ""

#: ../../atomic.rst
msgid "Returns"
msgstr ""

#: ../../atomic.rst:38 ../../atomic.rst:55
msgid "The old value of ``x``."
msgstr ""

#: ../../atomic.rst:40
msgid "For example, ::"
msgstr ""

#: ../../atomic.rst:43
msgid ""
"x = 3\n"
"y = 4\n"
"z = ti.atomic_add(x, y)\n"
"# now z = 7, y = 4, z = 3"
msgstr ""

#: ../../atomic.rst:53
msgid ""
"Atomically compute ``x & y`` (bitwise and), ``x | y`` (bitwise or), ``x ^"
" y`` (bitwise xor) and store the result to ``x``."
msgstr ""

#: ../../atomic.rst:60
msgid "Supported atomic operations on each backend:"
msgstr ""

#: ../../atomic.rst:63
msgid "type"
msgstr ""

#: ../../atomic.rst:63
msgid "CPU/CUDA"
msgstr ""

#: ../../atomic.rst:63
msgid "OpenGL"
msgstr ""

#: ../../atomic.rst:63
msgid "Metal"
msgstr ""

#: ../../atomic.rst:65
msgid "``i32``"
msgstr ""

#: ../../atomic.rst:65 ../../atomic.rst:67 ../../atomic.rst:69
#: ../../atomic.rst:71
msgid "OK"
msgstr ""

#: ../../atomic.rst:67
msgid "``f32``"
msgstr ""

#: ../../atomic.rst:69
msgid "``i64``"
msgstr ""

#: ../../atomic.rst:69 ../../atomic.rst:71
msgid "EXT"
msgstr ""

#: ../../atomic.rst:69 ../../atomic.rst:71
msgid "MISS"
msgstr ""

#: ../../atomic.rst:71
msgid "``f64``"
msgstr ""

#: ../../atomic.rst:74
msgid "(OK: supported; EXT: require extension; MISS: not supported)"
msgstr ""

#~ msgid "Returns"
#~ msgstr ""

#~ msgid "返回"
#~ msgstr ""

