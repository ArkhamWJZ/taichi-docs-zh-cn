# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016, Taichi Developers
# This file is distributed under the same license as the taichi package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: taichi 0.6.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-05-07 01:24-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"

#: ../../gui.rst:4
msgid "GUI system"
msgstr ""

#: ../../gui.rst:6
msgid ""
"Taichi has a built-in GUI system to help users display graphic results "
"easier."
msgstr ""

#: ../../gui.rst:10
msgid "Create a window"
msgstr ""

#: ../../gui.rst
msgid "Parameters"
msgstr ""

#: ../../gui.rst:15
msgid "(string) the window title"
msgstr ""

#: ../../gui.rst:16
msgid "(scalar or tuple) resolution / size of the window"
msgstr ""

#: ../../gui.rst:17
msgid "(optional, RGB hex) background color of the window"
msgstr ""

#: ../../gui.rst
msgid "Returns"
msgstr ""

#: ../../gui.rst:18
msgid "(GUI) an object represents the window"
msgstr ""

#: ../../gui.rst:20
msgid "Create a window. If ``res`` is scalar, then width will be equal to height."
msgstr ""

#: ../../gui.rst:23
msgid "This creates a window whose width is 1024, height is 768:"
msgstr ""

#: ../../gui.rst:27
msgid "gui = ti.GUI('Window Title', (1024, 768))"
msgstr ""

#: ../../gui.rst:32 ../../gui.rst:54 ../../gui.rst:90 ../../gui.rst:100
#: ../../gui.rst:114 ../../gui.rst:125 ../../gui.rst:136
msgid "(GUI) the window object"
msgstr ""

#: ../../gui.rst:33
msgid "(optional, string) see notes below"
msgstr ""

#: ../../gui.rst:35
msgid "Show the window on the screen."
msgstr ""

#: ../../gui.rst:38
msgid ""
"If `filename` is specified, screenshot will be saved to the file "
"specified by the name. For example, this screenshots each frame of the "
"window, and save it in ``.png``'s:"
msgstr ""

#: ../../gui.rst:42
msgid ""
"for frame in range(10000):\n"
"    render(img)\n"
"    gui.set_image(img)\n"
"    gui.show(f'{frame:06d}.png')"
msgstr ""

#: ../../gui.rst:49
msgid "Paint a window"
msgstr ""

#: ../../gui.rst:55
msgid "(np.array or Tensor) tensor containing the image, see notes below"
msgstr ""

#: ../../gui.rst:57
msgid "Set a image to display on the window."
msgstr ""

#: ../../gui.rst:59
msgid ""
"The pixel, ``i`` from bottom to up, ``j`` from left to right, is set to "
"the value of ``img[i, j]``."
msgstr ""

#: ../../gui.rst:62
msgid "If the window size is ``(x, y)``, then the ``img`` must be one of:"
msgstr ""

#: ../../gui.rst:64
msgid "``ti.var(shape=(x, y))``, a grey-scale image"
msgstr ""

#: ../../gui.rst:66
msgid "``ti.var(shape=(x, y, 3))``, where `3` is for `(r, g, b)` channels"
msgstr ""

#: ../../gui.rst:68
msgid "``ti.Vector(3, shape=(x, y))`` (see :ref:`vector`)"
msgstr ""

#: ../../gui.rst:70
msgid "``np.ndarray(shape=(x, y))``"
msgstr ""

#: ../../gui.rst:72
msgid "``np.ndarray(shape=(x, y, 3))``"
msgstr ""

#: ../../gui.rst:75
msgid "The data type of ``img`` must be one of:"
msgstr ""

#: ../../gui.rst:77
msgid "float32, clamped into [0, 1]"
msgstr ""

#: ../../gui.rst:79
msgid "float64, clamped into [0, 1]"
msgstr ""

#: ../../gui.rst:81
msgid "uint8, range [0, 255]"
msgstr ""

#: ../../gui.rst:83
msgid "uint16, range [0, 65535]"
msgstr ""

#: ../../gui.rst:85
msgid "uint32, range [0, UINT_MAX]"
msgstr ""

#: ../../gui.rst:91
msgid "(tuple of 2) the position of circle"
msgstr ""

#: ../../gui.rst:92
msgid "(optional, RGB hex) color to fill the circle"
msgstr ""

#: ../../gui.rst:93 ../../gui.rst:103
msgid "(optional, scalar) the radius of circle"
msgstr ""

#: ../../gui.rst:95
msgid "Draw a solid circle."
msgstr ""

#: ../../gui.rst:101
msgid "(np.array) the position of circles"
msgstr ""

#: ../../gui.rst:102
msgid "(optional, RGB hex or np.array of uint32) color(s) to fill circles"
msgstr ""

#: ../../gui.rst:105
msgid "Draw solid circles."
msgstr ""

#: ../../gui.rst:109
msgid ""
"If ``color`` is a numpy array, circle at ``pos[i]`` will be colored with "
"``color[i]``, therefore it must have the same size with ``pos``."
msgstr ""

#: ../../gui.rst:115
msgid "(tuple of 2) the first end point position of line"
msgstr ""

#: ../../gui.rst:116
msgid "(tuple of 2) the second end point position of line"
msgstr ""

#: ../../gui.rst:117
msgid "(optional, RGB hex) the color of line"
msgstr ""

#: ../../gui.rst:118
msgid "(optional, scalar) the width of line"
msgstr ""

#: ../../gui.rst:120
msgid "Draw a line."
msgstr ""

#: ../../gui.rst:126
msgid "(tuple of 2) the first end point position of triangle"
msgstr ""

#: ../../gui.rst:127
msgid "(tuple of 2) the second end point position of triangle"
msgstr ""

#: ../../gui.rst:128
msgid "(tuple of 2) the third end point position of triangle"
msgstr ""

#: ../../gui.rst:129
msgid "(optional, RGB hex) the color to fill the triangle"
msgstr ""

#: ../../gui.rst:131
msgid "Draw a solid triangle."
msgstr ""

#: ../../gui.rst:137
msgid "(tuple of 2) the top-left point position of rectangle"
msgstr ""

#: ../../gui.rst:138
msgid "(tuple of 2) the bottom-right point position of rectangle"
msgstr ""

#: ../../gui.rst:139
msgid "(optional, RGB hex) the color of stroke line"
msgstr ""

#: ../../gui.rst:140
msgid "(optional, scalar) the width of stroke line"
msgstr ""

#: ../../gui.rst:142
msgid "Draw a hollow rectangle."
msgstr ""

#: ../../gui.rst:146
msgid "Event processing"
msgstr ""

#: ../../gui.rst:148
msgid ""
"Every event have a key and type. *Event key* is the key that you pressed "
"on keyboard or mouse, can be one of:"
msgstr ""

#: ../../gui.rst:153
msgid ""
"ti.GUI.ESCAPE\n"
"ti.GUI.SHIFT\n"
"ti.GUI.LEFT\n"
"'a'\n"
"'b'\n"
"...\n"
"ti.GUI.LMB\n"
"ti.GUI.RMB"
msgstr ""

#: ../../gui.rst:162
msgid ""
"*Event type* is the type of event, for now, there are just three type of "
"event:"
msgstr ""

#: ../../gui.rst:166
msgid ""
"ti.GUI.RELEASE  # key up\n"
"ti.GUI.PRESS    # key down\n"
"ti.GUI.MOTION   # mouse moved"
msgstr ""

#: ../../gui.rst:171
msgid ""
"A *event filter* is a list combined of *key*, *type* and *(type, key)* "
"tuple, e.g.:"
msgstr ""

#: ../../gui.rst:173
msgid ""
"# if ESC pressed or released:\n"
"gui.get_event(ti.GUI.ESCAPE)\n"
"\n"
"# if any key is pressed:\n"
"gui.get_event(ti.GUI.PRESS)\n"
"\n"
"# if ESC pressed or SPACE released:\n"
"gui.get_event((ti.GUI.PRESS, ti.GUI.ESCAPE), (ti.GUI.RELEASE, "
"ti.GUI.SPACE))"
msgstr ""

#: ../../gui.rst:187 ../../gui.rst:212 ../../gui.rst:230 ../../gui.rst:250
msgid "(GUI)"
msgstr ""

#: ../../gui.rst:188 ../../gui.rst:213
msgid "(optional, EventFilter) filter out matched events"
msgstr ""

#: ../../gui.rst:189
msgid "(bool) ``False`` if there is no pending event, vise versa"
msgstr ""

#: ../../gui.rst:191
msgid "Try to pop a event from the queue, and store it in ``gui.event``."
msgstr ""

#: ../../gui.rst:193 ../../gui.rst:253
msgid "For example:"
msgstr ""

#: ../../gui.rst:197
msgid ""
"while gui.get_event():\n"
"    print('Event key', gui.event.key)"
msgstr ""

#: ../../gui.rst:201
msgid "For example, loop until ESC is pressed:"
msgstr ""

#: ../../gui.rst:205
msgid ""
"gui = ti.GUI('Title', (640, 480))\n"
"while not gui.get_event(ti.GUI.ESCAPE):\n"
"    gui.set_image(img)\n"
"    gui.show()"
msgstr ""

#: ../../gui.rst:214
msgid "(generator) a python generator, see below"
msgstr ""

#: ../../gui.rst:216
msgid ""
"Basically the same as ``gui.get_event``, except for this one returns a "
"generator of events instead of storing into ``gui.event``:"
msgstr ""

#: ../../gui.rst:220
msgid ""
"for e in gui.get_events():\n"
"    if e.key == ti.GUI.ESCAPE:\n"
"        exit()\n"
"    elif e.type == ti.GUI.SPACE:\n"
"        do_something()\n"
"    elif e.type in ['a', ti.GUI.LEFT]:\n"
"        ..."
msgstr ""

#: ../../gui.rst:231
msgid "(EventKey) keys you want to detect"
msgstr ""

#: ../../gui.rst:232
msgid "(bool) ``True`` if one of the keys pressed, vice versa"
msgstr ""

#: ../../gui.rst:236
msgid ""
"Must be used together with ``gui.get_event``, or it won't be updated! For"
" example:"
msgstr ""

#: ../../gui.rst:241
msgid ""
"while True:\n"
"    gui.get_event()  # must be called before is_pressed\n"
"    if gui.is_pressed('a', ti.GUI.LEFT):\n"
"        print('Go left!')\n"
"    elif gui.is_pressed('d', ti.GUI.RIGHT):\n"
"        print('Go right!')"
msgstr ""

#: ../../gui.rst:251
msgid "(tuple of 2) current cursor position within the window"
msgstr ""

#: ../../gui.rst:257
msgid "mouse_x, mouse_y = gui.get_cursor_pos()"
msgstr ""

#: ../../gui.rst:261
msgid "Image I/O"
msgstr ""

#: ../../gui.rst:263
msgid ""
"img = ti.imread('hello.png')\n"
"ti.imshow(img, 'Window Title')\n"
"ti.imwrite(img, 'hello2.png')"
msgstr ""

#: ../../gui.rst:269
msgid "TODO: complete here"
msgstr ""

