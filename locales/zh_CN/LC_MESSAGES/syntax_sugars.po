# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2018, Yuanming Hu
# This file is distributed under the same license as the taichi package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: taichi 0.5.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-04-24 11:24+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"

#: ../../syntax_sugars.rst:2
msgid "Syntax sugars"
msgstr ""

#: ../../syntax_sugars.rst:5
msgid "Aliases"
msgstr ""

#: ../../syntax_sugars.rst:7
msgid ""
"Creating aliases for global variables and functions with cumbersome names"
" can sometimes improve readability. In Taichi, this can be done by "
"assigning kernel and function local variables with ``ti.static()``, which"
" forces Taichi to use standard python pointer assignement."
msgstr ""

#: ../../syntax_sugars.rst:9
msgid "For example, consider the simple kernel:"
msgstr ""

#: ../../syntax_sugars.rst:11
msgid ""
"@ti.kernel\n"
"def my_kernel():\n"
"  for i, j in tensor_a:\n"
"    tensor_b[i, j] = some_function(tensor_a[i, j])"
msgstr ""

#: ../../syntax_sugars.rst:18
msgid "The tensors and function be aliased to new names with ``ti.static``:"
msgstr ""

#: ../../syntax_sugars.rst:20
msgid ""
"@ti.kernel\n"
"def my_kernel():\n"
"  a, b, fun = ti.static(tensor_a, tensor_b, some_function)\n"
"  for i,j in a:\n"
"    b[i,j] = fun(a[i,j])"
msgstr ""

#: ../../syntax_sugars.rst:30
msgid ""
"Aliases can also be created for class members and methods, which can help"
" prevent cluttering objective data-oriented programming code with "
"``self``."
msgstr ""

#: ../../syntax_sugars.rst:32
msgid ""
"For example, consider class kernel to compute the 2-D laplacian of some "
"tensor:"
msgstr ""

#: ../../syntax_sugars.rst:34
msgid ""
"@ti.kernel\n"
"def compute_laplacian(self):\n"
"  for i, j in a:\n"
"    self.b[i, j] = (self.a[i + 1,j] - 2.0*self.a[i, j] + self.a[i-1, "
"j])/(self.dx**2) \\\n"
"                + (self.a[i,j + 1] - 2.0*self.a[i, j] + self.a[i, "
"j-1])/(self.dy**2)"
msgstr ""

#: ../../syntax_sugars.rst:42
msgid "Using ``ti.static()``, it can be simplified to:"
msgstr ""

#: ../../syntax_sugars.rst:44
msgid ""
"@ti.kernel\n"
"def compute_laplacian(self):\n"
"  a,b,dx,dy = ti.static(self.a,self.b,self.dx,self.dy)\n"
"  for i,j in a:\n"
"    b[i,j] = (a[i+1, j] - 2.0*a[i, j] + a[i-1, j])/(dx**2) \\\n"
"           + (a[i, j+1] - 2.0*a[i, j] + a[i, j-1])/(dy**2)"
msgstr ""

#: ../../syntax_sugars.rst:55
msgid ""
"``ti.static`` can also be used in combination with ``if`` (compile-time "
"branching) and ``for`` (compile-time unrolling). See :ref:`meta` for more"
" details."
msgstr ""

#: ../../syntax_sugars.rst:57
msgid ""
"Here, we are using it for *compile-time const values*, i.e. the "
"**tensor/function handles** are constants at compile time."
msgstr ""

