# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2018, Yuanming Hu
# This file is distributed under the same license as the taichi package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
msgid ""
msgstr ""
"Project-Id-Version: taichi 0.5.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-08-02 22:06+0800\n"
"PO-Revision-Date: 2020-06-02 23:08-0400\n"
"Last-Translator: \n"
"Language: zh_CN\n"
"Language-Team: \n"
"Plural-Forms: nplurals=1; plural=0\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"

#: ../../utilities.rst:2
msgid "Developer utilities"
msgstr "开发者工具"

#: ../../utilities.rst:4
msgid ""
"This section provides a detailed description of some commonly used "
"utilities for Taichi developers."
msgstr ""

#: ../../utilities.rst:7
msgid "Logging"
msgstr "日志"

#: ../../utilities.rst:9
msgid ""
"Taichi uses `spdlog <https://github.com/gabime/spdlog>`_ as its logging "
"system. Logs can have different levels, from low to high, they are:"
msgstr ""

#: ../../utilities.rst:12
msgid ""
"trace\n"
"debug\n"
"info\n"
"warn\n"
"error"
msgstr ""

#: ../../utilities.rst:20
msgid "The higher the level is, the more critical the message is."
msgstr ""

#: ../../utilities.rst:22
#, fuzzy
msgid ""
"The default logging level is ``info``. You may override the default "
"logging level by:"
msgstr ""
"默认日志记录级别为 ``ti.INFO``。 你还可以通过将环境变量 ``TI_LOG_LEVEL`` 设置为诸如 ``trace`` 和 "
"``warn`` 之类的值来覆盖默认日志记录级别。"

#: ../../utilities.rst:24
msgid "Setting the environment variable like ``export TI_LOG_LEVEL=warn``."
msgstr ""

#: ../../utilities.rst:25
msgid "Setting the log level from Python side: ``ti.set_logging_level(ti.WARN)``."
msgstr ""

#: ../../utilities.rst:27
msgid "In Python, you may write logs using the ``ti.*`` interface:"
msgstr ""

#: ../../utilities.rst:29
msgid ""
"# Python\n"
"ti.trace(\"Hello world!\")\n"
"ti.debug(\"Hello world!\")\n"
"ti.info(\"Hello world!\")\n"
"ti.warn(\"Hello world!\")\n"
"ti.error(\"Hello world!\")"
msgstr ""

#: ../../utilities.rst:38
msgid "In C++, you may write logs using the ``TI_*`` interface:"
msgstr ""

#: ../../utilities.rst:40
msgid ""
"// C++\n"
"TI_TRACE(\"Hello world!\");\n"
"TI_DEBUG(\"Hello world!\");\n"
"TI_INFO(\"Hello world!\");\n"
"TI_WARN(\"Hello world!\");\n"
"TI_ERROR(\"Hello world!\");"
msgstr ""

#: ../../utilities.rst:49
msgid ""
"If one raises a message of the level ``error``, Taichi will be "
"**terminated** immediately and result in a ``RuntimeError`` on Python "
"side."
msgstr ""

#: ../../utilities.rst:52
msgid ""
"int func(void *p) {\n"
"  if (p == nullptr)\n"
"    TI_ERROR(\"The pointer cannot be null!\");\n"
"\n"
"  // will not reach here if p == nullptr\n"
"  do_something(p);\n"
"}"
msgstr ""

#: ../../utilities.rst:64
msgid "For people from Linux kernels, ``TI_ERROR`` is just ``panic``."
msgstr ""

#: ../../utilities.rst:67
msgid "You may also simplify the above code by using ``TI_ASSERT``:"
msgstr ""

#: ../../utilities.rst:69
msgid ""
"int func(void *p) {\n"
"  TI_ASSERT_INFO(p != nullptr, \"The pointer cannot be null!\");\n"
"  // or\n"
"  // TI_ASSERT(p != nullptr);\n"
"\n"
"  // will not reach here if p == nullptr\n"
"  do_something(p);\n"
"}"
msgstr ""

#: ../../utilities.rst:83
msgid "Benchmarking and regression tests"
msgstr "基准测试和回归测试"

#: ../../utilities.rst:85
msgid ""
"Run ``ti benchmark`` to run tests in benchmark mode. This will record the"
" performance of ``ti test``, and save it in ``benchmarks/output``."
msgstr ""
"运行 ``ti benchmark`` 以基准模式运行测试。 这将记录 ``ti test`` 的性能，并将其保存在 "
"``benchmarks/output`` 中。"

#: ../../utilities.rst:87
#, fuzzy
msgid ""
"Run ``ti regression`` to show the difference between the previous result "
"in ``benchmarks/baseline``. And you can see if the performance is "
"increasing or decreasing after your commits. This is really helpful when "
"your work is related to IR optimizations."
msgstr ""
"运行 ``ti regression`` 以显示 ``ti regression`` 中先前结果之间的差异。 你可以查看提交后性能是提高还是降低。"
" 当你的工作与中间表示码优化相关时，这很有帮助。"

#: ../../utilities.rst:89
#, fuzzy
msgid ""
"Run ``ti baseline`` to save the benchmark result to "
"``benchmarks/baseline`` for future comparison, this may be executed on "
"performance-related PRs, before they are merged into master."
msgstr ""
"运行 ``ti baseline`` 以将基准结果保存到 ``benchmarks/baseline`` "
"以供将来比较，这可以在与性能有关的PR上执行，然后再合并到master中。"

#: ../../utilities.rst:91
msgid ""
"For example, this is part of the output by ``ti regression`` after "
"enabling constant folding optimization pass:"
msgstr "例如，这是启用常数折叠优化传递后 ``ti regression`` 输出的一部分："

#: ../../utilities.rst:93
msgid ""
"linalg__________________polar_decomp______________________________\n"
"codegen_offloaded_tasks                       37 ->    39    +5.4%\n"
"codegen_statements                          3179 ->  3162    -0.5%\n"
"codegen_kernel_statements                   2819 ->  2788    -1.1%\n"
"codegen_evaluator_statements                   0 ->    14    +inf%\n"
"\n"
"linalg__________________init_matrix_from_vectors__________________\n"
"codegen_offloaded_tasks                       37 ->    39    +5.4%\n"
"codegen_statements                          3180 ->  3163    -0.5%\n"
"codegen_kernel_statements                   2820 ->  2789    -1.1%\n"
"codegen_evaluator_statements                   0 ->    14    +inf%"
msgstr ""
"linalg__________________polar_decomp______________________________\n"
"codegen_offloaded_tasks                       37 ->    39    +5.4%\n"
"codegen_statements                          3179 ->  3162    -0.5%\n"
"codegen_kernel_statements                   2819 ->  2788    -1.1%\n"
"codegen_evaluator_statements                   0 ->    14    +inf%\n"
"\n"
"linalg__________________init_matrix_from_vectors__________________\n"
"codegen_offloaded_tasks                       37 ->    39    +5.4%\n"
"codegen_statements                          3180 ->  3163    -0.5%\n"
"codegen_kernel_statements                   2820 ->  2789    -1.1%\n"
"codegen_evaluator_statements                   0 ->    14    +inf%"

#: ../../utilities.rst:109
#, fuzzy
msgid ""
"Currently ``ti benchmark`` only supports benchmarking number-of-"
"statements, no time benchmarking is included since it depends on hardware"
" performance and therefore hard to compare if the baseline is from "
"another machine. We are to purchase a fixed-performance machine as a time"
" benchmark server at some point. Discussion at: https://github.com"
"/taichi-dev/taichi/issue/948"
msgstr ""
"目前， ``ti benchmark`` "
"仅支持基准测试语句数，不包含时间基准测试，因为它取决于硬件性能，因此如果基准来自另一台计算机则很难进行比较。 "
"我们将在某个时间点购买固定性能的机器作为时间基准服务器。 讨论在: https://github.com/taichi-"
"dev/taichi/issue/948"

#: ../../utilities.rst:114
#, fuzzy
msgid ""
"The suggested workflow for the performance-related PR author to run the "
"regression tests is:"
msgstr "建议 **Pull Request 的作者** 运行回归测试的工作流程是："

#: ../../utilities.rst:116
#, fuzzy
msgid ""
"Run ``ti benchmark && ti baseline`` in ``master`` to save the current "
"performance as a baseline."
msgstr "在 ``master`` 分支中运行 ``ti benchmark && ti baseline`` 用来保存目前的结果作为基线。"

#: ../../utilities.rst:118
msgid "Run ``git checkout -b your-branch-name``."
msgstr "运行 ``git checkout -b your-branch-name`` （分支名称）."

#: ../../utilities.rst:120
msgid "Do works on the issue, stage 1."
msgstr "尝试解决问题（第一阶段）。"

#: ../../utilities.rst:122
msgid "Run ``ti benchmark && ti regression`` to obtain the result."
msgstr "运行 ``ti benchmark && ti regression`` 获取结果。"

#: ../../utilities.rst:124
msgid "(If result BAD) Do further improvements, until the result is satisfying."
msgstr "（结果不理想）继续优化直至结果理想。"

#: ../../utilities.rst:126
#, fuzzy
msgid ""
"(If result OK) Run ``ti baseline`` to save stage 1 performance as a "
"baseline."
msgstr "（结果理想）在合并之前，运行 ``ti baseline`` 以将第一阶段结果保存为新基线。"

#: ../../utilities.rst:128
msgid "Go forward to stage 2, 3, ..., and the same workflow is applied."
msgstr "继续进行第二，第三阶段，同时以上的工作流程也同样适用。"

#: ../../utilities.rst:132
msgid "(Linux only) Trigger ``gdb`` when programs crash"
msgstr "程序崩溃时触发GDB（仅限于Linux操作系统）"

#: ../../utilities.rst:134
msgid ""
"# Python\n"
"ti.set_gdb_trigger(True)\n"
"\n"
"// C++\n"
"CoreState::set_trigger_gdb_when_crash(true);\n"
"\n"
"# Shell\n"
"export TI_GDB_TRIGGER=1"
msgstr ""
"# Python\n"
"ti.set_gdb_trigger(True)\n"
"\n"
"// C++\n"
"CoreState::set_trigger_gdb_when_crash(true);\n"
"\n"
"# Shell\n"
"export TI_GDB_TRIGGER=1"

#: ../../utilities.rst:148
msgid ""
"**Quickly pinpointing segmentation faults/assertion failures using** "
"``gdb``: When Taichi crashes, ``gdb`` will be triggered and attach to the"
" current thread. You might be prompt to enter sudo password required for "
"gdb thread attaching. After entering ``gdb``, check the stack backtrace "
"with command ``bt`` (``backtrace``), then find the line of code "
"triggering the error."
msgstr ""
"使用 ``gdb`` **快速定位段错误 (segmentation fault) 和断言错误 (assertion failure)**: "
"在Taichi 崩溃时，``gdb`` 会被触发并附着到当前的线程上。您可能需要输入和 ``sudo`` 超级用户权限相关的密码来允许 gdb "
"附着到当前的线程上。再输入 ``gdb`` 之后， 您可以使用 ``bt`` "
"（``backtrace``）指令检查堆的回溯，从而定位产生错误的代码的具体行数。"

#: ../../utilities.rst:158
msgid "Code coverage"
msgstr ""

#: ../../utilities.rst:160
msgid ""
"To ensure that our tests covered every situation, we need to have "
"**coverage report**. That is, to detect how many percents of code lines "
"in is executed in test."
msgstr ""

#: ../../utilities.rst:163
msgid ""
"Generally, the higher the coverage percentage is, the stronger our tests "
"are."
msgstr ""

#: ../../utilities.rst:164
msgid ""
"When making a PR, we want to **ensure that it comes with corresponding "
"tests**. Or code coverage will decrease."
msgstr ""

#: ../../utilities.rst:165
msgid ""
"Code coverage statuses are visible at `Codecov <https://codecov.io/gh"
"/taichi-dev/taichi>`_."
msgstr ""

#: ../../utilities.rst:166
msgid ""
"Currently, Taichi is only set up for Python code coverage report, not for"
" C++ yet."
msgstr ""

#: ../../utilities.rst:168
msgid ""
"ti test -C       # run tests and save results to .coverage\n"
"coverage report  # generate a coverage report on terminal output\n"
"coverage html    # generate a HTML form report in htmlcov/index.html"
msgstr ""

#: ../../utilities.rst:176
msgid "Interface system (legacy)"
msgstr "接口系统（遗留）"

#: ../../utilities.rst:177
msgid "Print all interfaces and units"
msgstr "打印所有接口和单位"

#: ../../utilities.rst:179
msgid "ti.core.print_all_units()"
msgstr "ti.core.print_all_units()"

#: ../../utilities.rst:184
msgid "Serialization (legacy)"
msgstr "序列化（遗留）"

#: ../../utilities.rst:186
msgid ""
"The serialization module of taichi allows you to serialize/deserialize "
"objects into/from binary strings."
msgstr "Taichi的序列化模块可以允许你将对象序列化/反序列化成二进制字符串。"

#: ../../utilities.rst:188
#, fuzzy
msgid ""
"You can use ``TI_IO`` macros to explicitly define fields necessary in "
"Taichi."
msgstr "你可以使用 ``TI_IO`` 宏来显式定义Taichi中必要的字段。"

#: ../../utilities.rst:190
msgid ""
"// TI_IO_DEF\n"
"struct Particle {\n"
"    Vector3f position, velocity;\n"
"    real mass;\n"
"    string name;\n"
"\n"
"    TI_IO_DEF(position, velocity, mass, name);\n"
"}\n"
"\n"
"// TI_IO_DECL\n"
"struct Particle {\n"
"    Vector3f position, velocity;\n"
"    real mass;\n"
"    bool has_name\n"
"    string name;\n"
"\n"
"    TI_IO_DECL() {\n"
"        TI_IO(position);\n"
"        TI_IO(velocity);\n"
"        TI_IO(mass);\n"
"        TI_IO(has_name);\n"
"        // More flexibility:\n"
"        if (has_name) {\n"
"            TI_IO(name);\n"
"        }\n"
"    }\n"
"}\n"
"\n"
"// TI_IO_DEF_VIRT();"
msgstr ""
"// TI_IO_DEF\n"
"struct Particle {\n"
"    Vector3f position, velocity;\n"
"    real mass;\n"
"    string name;\n"
"\n"
"    TI_IO_DEF(position, velocity, mass, name);\n"
"}\n"
"\n"
"// TI_IO_DECL\n"
"struct Particle {\n"
"    Vector3f position, velocity;\n"
"    real mass;\n"
"    bool has_name\n"
"    string name;\n"
"\n"
"    TI_IO_DECL() {\n"
"        TI_IO(position);\n"
"        TI_IO(velocity);\n"
"        TI_IO(mass);\n"
"        TI_IO(has_name);\n"
"        // More flexibility:\n"
"        if (has_name) {\n"
"            TI_IO(name);\n"
"        }\n"
"    }\n"
"}\n"
"\n"
"// TI_IO_DEF_VIRT();"

#: ../../utilities.rst:224
msgid "Progress notification (legacy)"
msgstr "进展通知（遗留）"

#: ../../utilities.rst:226
msgid ""
"The Taichi messenger can send an email to ``$TI_MONITOR_EMAIL`` when the "
"task finishes or crashes. To enable:"
msgstr "当任务完成或崩溃时，taichi消息传递程序可以将邮件发送到 ``$TI_MONITOR_EMAIL`` 。 要启用的话："

#: ../../utilities.rst:229
msgid ""
"from taichi.tools import messenger\n"
"messenger.enable(task_id='test')"
msgstr ""

#~ msgid "Utilities"
#~ msgstr "实用工具"

#~ msgid "When a performance related PR is ready, checkout that PR locally."
#~ msgstr "与性能相关的PR准备就绪后，请在本地签出该PR。"

#~ msgid "Decide wheater to approve or request change, depends on the result."
#~ msgstr "决定是否批准或请求更改，取决于结果。"

#~ msgid ""
#~ "**Reviewers** can also ask the PR "
#~ "author to run and upload the test"
#~ " result, if they consider the PR "
#~ "performance sensitive. If the reviewers "
#~ "would like to run the regression "
#~ "tests themselves, the suggested workflow "
#~ "is:"
#~ msgstr "**Reviewers** 如果认为PR性能敏感，也可以要求PR作者运行并上传测试结果。 如果审阅者想自己运行回归测试，建议的工作流程为："

#~ msgid ""
#~ "When a stage of work is done, "
#~ "run ``ti benchmark && ti regression``"
#~ " to obtain result."
#~ msgstr "当一个工作阶段完成后，运行 ``ti benchmark && ti regression`` 以获得结果。"

#~ msgid ""
#~ "When ready for review, post the "
#~ "latest result in PR comments, wait "
#~ "for the reviewer."
#~ msgstr "准备好进行审核时，请在PR评论中发布最新结果，然后等待审核者。"

#~ msgid "Get feedback from the reviewer, and improve the result."
#~ msgstr "获得审阅者的反馈，并改善结果。"

#~ msgid ""
#~ "'''\n"
#~ "level can be {}\n"
#~ "    ti.TRACE\n"
#~ "    ti.DEBUG\n"
#~ "    ti.INFO\n"
#~ "    ti.WARN\n"
#~ "    ti.ERR\n"
#~ "    ti.CRITICAL\n"
#~ "'''\n"
#~ "ti.set_logging_level(level)"
#~ msgstr ""
#~ "'''\n"
#~ "level can be {}\n"
#~ "    ti.TRACE\n"
#~ "    ti.DEBUG\n"
#~ "    ti.INFO\n"
#~ "    ti.WARN\n"
#~ "    ti.ERR\n"
#~ "    ti.CRITICAL\n"
#~ "'''\n"
#~ "ti.set_logging_level(level)"

#~ msgid ""
#~ "To ensure that our tests covered "
#~ "every situations, we need to have "
#~ "**coverage report**. That is, to detect"
#~ " how many percent of code lines "
#~ "in is executed in test."
#~ msgstr ""

